#include "udf.hpp"

void UDF_LoadKernels(occa::properties & kernelInfo)
{
}

void UDF_Setup(nrs_t *nrs)
{
  // set initial conditions for the velocity, temperature, and pressure. Because
  // we turn off the solves, we're just doing postprocessing of whatever we set
  // for the initial conditions
  mesh_t * mesh = nrs->cds->mesh[0];

  // loop over all the GLL points and assign directly to the solution arrays by
  // indexing according to the field offset necessary to hold the data for each
  // solution component
  int n_gll_points = mesh->Np * mesh->Nelements;
  for (int n = 0; n < n_gll_points; ++n)
  {
    dfloat x = mesh->x[n];
    dfloat y = mesh->y[n];
    dfloat z = mesh->z[n];
    dfloat r = std::sqrt(x*x + y*y);

    dfloat theta;
    if (x > 0 && y >= 0)
      theta = std::atan(y / x);
    if (x < 0 && y >= 0)
      theta = M_PI - std::atan(std::abs(y / x));
    if (x < 0 && y < 0)
      theta = std::atan(y / x) + M_PI;
    if (x > 0 && y < 0)
      theta = 2 * M_PI - std::atan(std::abs(y / x));

    dfloat Vr = 0.0;
    dfloat Vt = 0.1 + 10.0 * r;
    nrs->U[n + 0 * nrs->fieldOffset] = Vr * std::cos(theta) - Vt * std::sin(theta);
    nrs->U[n + 1 * nrs->fieldOffset] = Vr * std::sin(theta) + Vt * std::cos(theta);
    nrs->U[n + 2 * nrs->fieldOffset] = 2.0;

    nrs->P[n] = x+y+z;

    nrs->cds->S[n + 0 * nrs->cds->fieldOffset[0]] = exp(100*r)+200*z;
  }
}
