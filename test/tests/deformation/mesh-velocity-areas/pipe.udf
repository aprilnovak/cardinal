//
// nekRS User Defined File
//
#include <math.h>
#include "udf.hpp"

void uservp(nrs_t *nrs, dfloat time, occa::memory o_U, occa::memory o_S,
            occa::memory o_UProp, occa::memory o_SProp)
{
  mesh_t *mesh = nrs->meshV;

  if (!platform->options.compareArgs("MESH SOLVER", "NONE"))
  {
    // The default nu is 1.0, but here we set it to illustrate how
    dfloat nu = 1.0;
    auto o_mesh_diff = o_UProp + 2 * nrs->fieldOffset * sizeof(dfloat);
    platform->linAlg->fill(nrs->meshV->Nlocal, nu, o_mesh_diff);
  }
}

void UDF_LoadKernels(occa::properties& kernelInfo)
{
}

void UDF_Setup(nrs_t *nrs)
{
  udf.properties = &uservp;

  mesh_t* mesh = nrs->cds->mesh[0];
  int num_quadrature_points = mesh->Np * mesh->Nelements;

  for (int n = 0; n < num_quadrature_points; n++) {
    float xx = mesh->x[n];
    float yy = mesh->y[n];
    float zz = mesh->z[n];

    nrs->U[n + 0 * nrs->fieldOffset] = 0;
    nrs->U[n + 1 * nrs->fieldOffset] = 0;
    nrs->U[n + 2 * nrs->fieldOffset] = 0;

    nrs->P[n] = 1.0;

    nrs->cds->S[n + 0 * nrs->cds->fieldOffset[0]] = 0.0;
  }
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
}
